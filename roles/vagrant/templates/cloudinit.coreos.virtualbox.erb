#!/bin/bash
cat <<-EOF >/var/lib/coreos-vagrant/vagrantfile-user-data
#cloud-config
#
#   Author: Rohith
#   Date: 2015-06-04 13:14:14 +0100 (Thu, 04 Jun 2015)
#
#  vim:ts=2:sw=2:et
#

hostname: <%= @hostname %>.<%= @domain %>

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoZ8+Oz2YLPklKGcEChFQeYJU6IEje3rJ0jUB3BJdTUJIbhUS8/1dGDXUTLWoM/7UrCBztFo5zH9E1wP1G6HwwRBwt48xVCr7bxLyTokr0hsfIRIf8NpnAnRTV+ltXcViqur9LsXEq07IAKP8QxJcECC3uzEFlHEmOu7lRcWa+SPv7sYv7KJ3BDXsAs/maVy19vWtVqkWdPtZepnO3xc0atJWOmNWn1T5tuc5NPIsep3VtsjqGrkuq6sE1npIqkFl0QDZCc25F5AFlEtNHZa3IYg3q6D76N9+qdGqvEpaRlXYuCA+TBONiVu+WpuouiMu9UycK+VFLzFdOgA/Fzfvf jest@starfury
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7K4+mLac9yexhMY5N+XtQIbTFHxVJJLlpm4/DJw3HET25AZpy7AeBDhQwgjYHd+saPUuocxNkztmYelgXkIWhIwWn2vODt0wBryt1skNs07mVm+jPawNRrEs9q+uVVAn64P+2WmyJVgsFWOkKkrnH/sypJnLSNk8WDdpqD6JLz4fsy9+zinMh7k7Xo5UfBq78pVfUS9aVlMpOj3NmdD1UpxbIBsC+ttlVR43rqrnySK9zhzezYot4PlA1LInnw8E7o8TxnJ6z2xXx5PsNMbjLW94OjpjsbvbKsKnLunA2LMc65HtOAVdPqHTWxbMuSlKjChiWJDjujdjVID8FpW09 imported-openssh-key
  - <%= @public_key %>

resolv_conf:
  nameservers: [ '8.8.8.8', '8.8.4.4' ]
  searchdomains:
    - <%= @domain %>
  domain: <%= @domain %>
  options:
    rotate: true
    timeout: 1

write_files:
  - path: /etc/hosts
    permissions: 0444
    owner: root
    content: |
      <%- boxes.each_pair do |hostname, config| -%>
      <%= config['virtualbox']['ip'] %> <%= hostname %> 
      <%- end -%>
  - path: /etc/confd/templates/hosts.cfg.tmpl
    permissions: 0444
    owner: root:root
    content: |
      # Generated by confd ----

      127.0.0.1 localhost.localdomain localhost
      ::1   localhost6.localdomain6 localhost6

      {{ range \$item := gets "/hosts/*" }}
      {{ \$item.Value }}    {{ \$item.Key | base }}{{ end }}

  - path: /etc/confd/conf.d/hosts.toml
    permissions: 0444
    owner: root:root
    content: |
      [template]
      src   = "hosts.cfg.tmpl"
      dest  = "/etc/hosts"
      owner = "root"
      group = "root"
      mode  = "0444"
      keys  = [
        "/hosts"
      ]
  - path: /run/hosts-etc.service
    permissions: 0440
    owner: root:root
    content: |
      [Unit]
      Description=Hosts Confd Service
      Requires=etcd.service
      After=etcd.service
      
      [Service]
      Restart=on-failure
      RestartSec=5

      ExecStartPre=/bin/chmod +x /opt/bin/confd
      ExecStart=/opt/bin/confd -backend=etcd -watch=true

      [X-Fleet]
      Global=true
  - path: /config/ansible/ansible.keys
    permissions: 0400
    owner: root:root
    content: |
      <%= @public_key %>
  - path: /config/ansible/ansible.service
    permissions: 0400
    owner: root:root
    content: |
      [Unit]
      Description=Ansible Container
      Requires=fleet.service 
      After=fleet.service 

      [Service]
      Restart=on-failure
      RestartSec=5

      TimeoutStartSec=0
      ExecStartPre=-/usr/bin/docker kill ansible
      ExecStartPre=-/usr/bin/docker rm ansible
      ExecStartPre=/usr/bin/docker pull gambol99/ansible
      ExecStart=/usr/bin/docker run \
        --name ansible --rm --net=host \
        -v /config:/config \
        -v /etc/environment:/etc/environment \
        -v /config/ansible/ansible.keys:/root/.ssh/authorized_keys \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /var/run/fleet.sock:/var/run/fleet.sock \
        -v /:/host \
        gambol99/ansible

      ExecStop=/usr/bin/docker kill ansible

      [X-Fleet]
      Global=true
coreos:
  etcd:
    addr: \$private_ipv4:4001
    peer-addr: \$private_ipv4:7001 
    discovery: <%= @discovery %> 
  fleet:
    public-ip: \$private_ipv4
    metadata: cluster=dev,location=dev,host=<%= @hostname.gsub(/[0-9]*/,'') %>,<%= @fleet.map { |k,v| "#{k}=#{v}" }.join(',') %>
  flannel:
    interface: eth1
  update:
    reboot-strategy: off
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Unit]
          Requires=etcd.service
          After=etcd.service
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network" : "10.244.0.0/16", "Backend" : { "Type" : "vxlan" } }'
    - name: flanneld-fixup.service
      command: start
      content: |
        [Unit]
        Description=Fixup Flanneld 
        Requires=flanneld.service
        Requires=docker.service
        After=flanneld.service
        After=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/bin/ip link delete docker0
        ExecStart=/bin/systemctl restart docker
    <%- if docker_mirror? -%>
    - name: docker.service
      command: start
      drop-ins:
      - name: 51-docker-mirror.conf
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
          [Service]
          Environment=DOCKER_OPTS='--registry-mirror=http://10.250.1.1:5000'
    <%- end -%>
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/sbin/wipefs -f /dev/sdb
        ExecStart=/usr/sbin/mkfs.ext4 /dev/sdb
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/sdb
        Where=/var/lib/docker
        Type=ext4
    - name: restart-docker.service
      command: start
      content: |
        [Unit]
        Description=Restart Docker Service
        Requires=var-lib-docker.mount
        After=var-lib-docker.mount
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/systemctl restart docker 
    <%- if @hostname =~ /^(gluster|store)/ -%>
    <%- mountpount = ( @hostname =~ /^gluster/ ) ? 'srv/gluster' : 'var/lib/ceph' -%>
    - name: format-storage.service
      command: start
      content: |
        [Unit]
        Description=Formats the Storage drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=-/usr/sbin/wipefs /dev/sdc
        ExecStartPre=-/usr/sbin/mkfs.xfs /dev/sdc
        ExecStart=/bin/mkdir -p <%= mountpount %>
    - name: <%= mountpount.gsub('/','-') %>.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-storage.service
        After=format-storage.service
        [Mount]
        What=/dev/sdc
        Where=/<%= mountpount %>
        Type=xfs
    <%- end -%>
    - name: install-ansible.service 
      command: start 
      content: |
        [Unit]
        Description=Install Ansible Container
        Requires=fleet.service 
        After=fleet.service 

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/mkdir -p /config/ansible
        ExecStart=/usr/bin/bash -c "while true; do /usr/bin/fleetctl start /config/ansible/ansible.service && exit 0 || sleep 2; done"
    - name: install-confd.service
      command: start
      content: |
        [Unit]
        Description=Install the confd binary

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300

        ExecStartPre=-/usr/bin/mkdir -p /opt/bin /etc/confd/conf.d /etc/confd/templates
        ExecStartPre=-/bin/wget -q https://github.com/kelseyhightower/confd/releases/download/v0.9.0/confd-0.9.0-linux-amd64 -O /opt/bin/confd
        ExecStart=/bin/chmod +x /opt/bin/confd
    - name: host-presence.service
      command: start
      content: |
        [Unit]
        Description=Host Presence Container
        Requires=etcd.service
        Requires=fleet.service
        After=etcd.service
        After=fleet.service

        [Service]
        EnvironmentFile=/etc/environment
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=60
        ExecStart=/usr/bin/bash -c "while true; do /usr/bin/etcdctl set /hosts/%H \$COREOS_PRIVATE_IPV4 && exit 0 || sleep 2; done"
    - name: hosts-startup.service
      command: start
      content: |
        [Unit]
        Description=Hosts Service Startup
        Requires=fleet.service
        Requires=install-confd.service
        After=fleet.service
        After=install-confd.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300
        ExecStart=/usr/bin/bash -c "while true; do /usr/bin/fleetctl start /run/hosts-etc.service && exit 0 || sleep 2; done"
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone

        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone UTC
        RemainAfterExit=yes
        Type=oneshot
    - name: install-kubernetes.service
      command: start
      content: |
        [Unit]
        Description=Install kubernetes binaries

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300
        ExecStartPre=-/usr/bin/mkdir -p /opt/kubernetes/bin
        ExecStartPre=-/usr/bin/wget -q https://storage.googleapis.com/kubernetes-release/release/v0.18.2/bin/linux/amd64/hyperkube -O /opt/kubernetes/bin/hyperkube
        ExecStartPre=-/usr/bin/wget -q https://storage.googleapis.com/kubernetes-release/release/v0.18.2/bin/linux/amd64/kubectl -O /opt/kubernetes/bin/kubectl
        ExecStart=/bin/chmod +x /opt/kubernetes/bin/hyperkube /opt/kubernetes/bin/kubectl
EOF
