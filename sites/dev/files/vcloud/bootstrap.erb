#!/bin/bash

PATH=$PATH:/usr/bin
LOG_FILE="/tmp/guest_customization.log"
FLEET_VERSION="v0.9.1"
FLEET_URL="https://github.com/coreos/fleet/releases/download/${FLEET_VERSION}/fleet-${FLEET_VERSION}-linux-amd64.tar.gz"

say() {
  [ -n "$@" ] && echo -e "$@" | tee -a $LOG_FILE
}

stage() {
  say "[STAGE]: $@"
}

failed() {
  say "[FAILED]: $@"
  exit 1
}

check() {
  say " [CHECK]: $@"
  eval "$@" || failed "unable to execute the following command: $@"
}

setup() {

  stage "SSH Keys"
  check "mkdir -p /root/.ssh"
  check "cat <<-EOF >> /root/.ssh/authorized_keys
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7K4+mLac9yexhMY5N+XtQIbTFHxVJJLlpm4/DJw3HET25AZpy7AeBDhQwgjYHd+saPUuocxNkztmYelgXkIWhIwWn2vODt0wBryt1skNs07mVm+jPawNRrEs9q+uVVAn64P+2WmyJVgsFWOkKkrnH/sypJnLSNk8WDdpqD6JLz4fsy9+zinMh7k7Xo5UfBq78pVfUS9aVlMpOj3NmdD1UpxbIBsC+ttlVR43rqrnySK9zhzezYot4PlA1LInnw8E7o8TxnJ6z2xXx5PsNMbjLW94OjpjsbvbKsKnLunA2LMc65HtOAVdPqHTWxbMuSlKjChiWJDjujdjVID8FpW09 imported-openssh-key
EOF"
  check "chmod 0400 /root/.ssh/authorized_keys"

  stage "Environment Setup"
  check 'cat <<-EOF > /etc/environment
PRIVATE_IP=<%= vars[:ip_address] %>
CLUSTER=<%= vars[:cluster] %>
ETCD_PEERS=<%= vars[:peers].map { |host,ip| "#{host}=http://#{ip}:2380" }.join(',')  %>
<%- if vars[:metadata] -%>
FLEET_METADATA="<%= Array(vars[:metadata]).join(',') %>"
<%- end -%>
EOF'

  stage "Disabling SELinix"
  check "test -f /etc/sysconfig/selinux"
  check "sed -i 's/enforcing/permissive/' /etc/sysconfig/selinux /etc/selinux/config"
}

initialize() {
  stage "Networking"
  check "service network restart"

  stage "Generating the static hosts file"
  cat <<-EOF >> /etc/hosts
<% vars[:peers].map do |host,ip| %>
<%= ip %> <%= host %><% end %>
EOF

  stage "Downgrading Docker to fix bugs"
  cat <<-EOF > /etc/yum.repos.d/virt.repo
[virt-release]
name=virt-release
baseurl=http://cbs.centos.org/repos/virt7-release/x86_64/os/
enabled=1
gpgcheck=0
EOF
  check "test -f /etc/yum.repos.d/virt.repo"

  check "rpm -e docker"
  check "yum install -y docker-1.5.0-1.el7 nc"
  check "systemctl stop firewalld || true"
  check "systemctl disable firewalld || true"
  check "systemctl enable docker"
  check "systemctl restart docker"

  check "echo 1 > /sys/devices/virtual/net/docker0/bridge/nf_call_iptables || true"
  check "echo 1 > /sys/devices/virtual/net/docker0/bridge/nf_call_ip6tables || true"
}

main() {
  say "Performing stage: $1"
  [[ "$1" == "precustomization"  ]] && setup
  [[ "$1" == "postcustomization" ]] && initialize
}

main $1
exit 0
